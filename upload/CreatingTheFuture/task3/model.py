# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cjO3jHxqU5XuMNsoq2Y_pdskVtBmmB7I
"""

# ===============================  Import libaries    ==============================
import random
import pandas as pd
import numpy as np
import os 
import torch
import warnings
import pickle

from torch import nn
from torch.utils.data import DataLoader
from sklearn.datasets import load_boston
from sklearn.preprocessing import StandardScaler
from torchinfo import summary
from transformers import AutoTokenizer, AutoModel, BertConfig, XLMRobertaConfig
from transformers import AutoTokenizer, AutoModelForMaskedLM
from scipy import stats
from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
import pickle

class MyModel():
  def  __init__(self):
    self.model = RandomForestRegressor()
    # do here any initializations you require

  def load(self, model_resource_folder):

    filename = f'{model_resource_folder}/finalized_model.sav'
    self.model = pickle.load(open(filename, 'rb'))
    
    # we'll call this code before prediction
    # use this function to load any pretrained model and any other resource, from the given folder path

  def train(self, train_data_file, validation_data_file, model_resource_folder):

    train_df = pd.read_csv(train_data_file, sep='\t', names=['score', 'text_a_romanian', 'text_b_romanian'])
    valid_df = pd.read_csv(validation_data_file, sep='\t', names=['score', 'text_a_romanian', 'text_b_romanian'])

    internal_train = f"{model_resource_folder}/train_new_final.tsv"
    internal_valid = f"{model_resource_folder}/dev_new_final.tsv"
 
    internal_train_df = pd.read_csv(internal_train, sep='\t', names=['score', 'text_a_romanian', 'text_b_romanian','text_a_english','text_b_english','score_english', 'score_romanian'])
    internal_valid_df = pd.read_csv(internal_valid, sep='\t', names=['score', 'text_a_romanian', 'text_b_romanian','text_a_english','text_b_english','score_english','score_romanian'])

    joined_train = train_df.merge(internal_train_df, on=['text_a_romanian','text_b_romanian'])

    print(joined_train.columns)
    joined_valid = valid_df.merge(internal_valid_df, on=['text_a_romanian','text_b_romanian'])

    train_features = joined_train[['score_english','score_romanian']].to_numpy()
    train_outputs  = joined_train[['score_x']].to_numpy()

    validation_features = joined_valid[['score_english','score_romanian']].to_numpy()
    validation_outputs  = joined_valid[['score_x']].to_numpy()

    self.model.fit(train_features,train_outputs)


  def save(self,model_resource_folder):
    filename = f'{model_resource_folder}/finalized_model.sav'
    pickle.dump(self.model, open(filename, 'wb'))

    # we'll call this function right after init
    # place here all your training code
    # at the end of training, place all required resources, trained model, etc in the given model_resource_folder

  def predict(self, test_data_file, model_resource_folder):

    test_df = pd.read_csv(test_data_file, sep='\t', names=['score', 'text_a_romanian', 'text_b_romanian'])

    internal_test = f"{model_resource_folder}/test_new_final.tsv"

    internal_test_df = pd.read_csv(internal_test, sep='\t', names=['score', 'text_a_romanian', 'text_b_romanian','text_a_english','text_b_english','score_english','score_romanian'])    # we'll call this function after the load()

    joined_test = test_df.merge(internal_test_df, on=['text_a_romanian','text_b_romanian'])

    test_features = joined_test[['score_english','score_romanian']].to_numpy()
    test_outputs  = joined_test[['score_x']].to_numpy()

    predicted_scores = self.model.predict(test_features)


    (coeff, p_value) = stats.pearsonr(predicted_scores, test_outputs)

    return coeff.item()

    # the output of this function is a single value, the Pearson correlation on the similarity score column of the test data and the predicted similiarity scores for each pair of texts in the test data.

#model = MyModel()

#model.train('/content/RO-STS.train.tsv','/content/RO-STS.dev.tsv','/content/resource_folder')

#model.save('./resource_folder')

#model.load('./resource_folder')

#model.predict('/content/RO-STS.dev.tsv','/content/resource_folder')